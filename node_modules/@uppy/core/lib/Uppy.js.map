{"version":3,"names":["Translator","ee","nanoid","throttle","DefaultStore","getFileType","getFileNameAndExtension","getSafeFileId","supportsUploadProgress","getFileName","justErrorsLogger","debugLogger","Restricter","defaultOptions","defaultRestrictionOptions","RestrictionError","packageJson","locale","Symbol","for","Uppy","constructor","opts","Object","create","Set","updateOnlineStatus","bind","defaultLocale","id","autoProceed","allowMultipleUploadBatches","debug","restrictions","meta","onBeforeFileAdded","currentFile","onBeforeUpload","files","store","logger","infoTimeout","log","VERSION","i18nInit","calculateProgress","leading","trailing","setState","plugins","currentUploads","allowNewUpload","capabilities","uploadProgress","individualCancellation","resumableUploads","totalProgress","info","recoveredState","i18n","subscribe","prevState","nextState","patch","emit","updateAll","window","event","args","on","callback","once","off","state","iteratePlugins","plugin","update","getState","patchFilesState","filesWithNewState","existingFilesState","fromEntries","entries","map","fileID","newFileState","setFileState","Error","translator","translate","i18nArray","translateArray","setOptions","newOpts","setMeta","resetProgress","defaultProgress","percentage","bytesUploaded","uploadComplete","uploadStarted","updatedFiles","keys","forEach","progress","error","addPreProcessor","fn","add","removePreProcessor","delete","addPostProcessor","removePostProcessor","addUploader","removeUploader","data","updatedMeta","setFileMeta","newMeta","getFile","getFiles","values","getFilesByIds","ids","getObjectOfFilesPerState","filesObject","inProgressFiles","filter","newFiles","file","startedFiles","preprocess","postprocess","uploadStartedFiles","pausedFiles","isPaused","completeFiles","erroredFiles","inProgressNotPausedFiles","processingFiles","isUploadStarted","length","isAllComplete","isAllErrored","isAllPaused","isUploadInProgress","isSomeGhost","some","isGhost","validateRestrictions","validate","err","checkIfFileAlreadyExists","addFile","nextFilesState","validFilesToAdd","errors","restrictionErrors","isRestriction","firstValidFileToAdd","name","type","addFiles","fileDescriptors","nonRestrictionErrors","message","subError","smart_count","details","AggregateError","removeFiles","fileIDs","reason","updatedUploads","removedFiles","fileIsNotRemoved","uploadFileID","undefined","uploadID","newFileIDs","stateUpdate","calculateTotalProgress","removedFileIDs","join","removeFile","pauseResume","wasPaused","pauseAll","inProgressUpdatedFiles","updatedFile","resumeAll","retryAll","filesToRetry","Promise","resolve","successful","failed","forceAllowNewUpload","cancelAll","retryUpload","logout","provider","canHavePercentage","Number","isFinite","bytesTotal","Math","round","inProgress","sizedFiles","unsizedFiles","progressMax","currentProgress","reduce","acc","totalSize","averageSize","uploadedSize","online","navigator","onLine","wasOffline","getID","use","Plugin","msg","TypeError","pluginId","existsPluginAlready","getPlugin","push","install","foundPlugin","find","method","flat","removePlugin","instance","uninstall","list","index","findIndex","item","splice","updatedState","close","removeEventListener","hideInfo","slice","duration","isComplexMessage","setTimeout","warn","restore","reject","addResultData","currentUpload","result","upload","uploader","onBeforeUploadResult","then","validateMinNumberOfFiles","catch","currentlyUploadingFiles","flatMap","curr","waitingFileIDs","indexOf","userFacingErrors","isUserFacing","maxNumToShow","firstErrors","additionalErrors","count","missingFields","getMissingRequiredMetaFields","missingRequiredMetaFields","success","fileDescriptorOrFile","fileDescriptor","File","size","fileType","fileName","fileExtension","extension","isRemote","Boolean","source","remote","preview","scheduledAutoProceed","stack","filesToAdd","existingFiles","fileToAdd","newFile","existingFileState","onBeforeFileAddedResult","validateSingleFile","validateAggregateRestrictions","errorHandler","response","errorMsg","newError","uploadStalledWarningRecentlyEmitted","trim","onUploadStarted","filesFiltered","exists","filesState","Date","now","uploadResp","mode","uploadURL","addEventListener","allowMultipleUploads","step","getCurrentUpload","steps","version"],"sources":["Uppy.js"],"sourcesContent":["/* eslint-disable max-classes-per-file */\n/* global AggregateError */\n\nimport Translator from '@uppy/utils/lib/Translator'\nimport ee from 'namespace-emitter'\nimport { nanoid } from 'nanoid/non-secure'\nimport throttle from 'lodash.throttle'\nimport DefaultStore from '@uppy/store-default'\nimport getFileType from '@uppy/utils/lib/getFileType'\nimport getFileNameAndExtension from '@uppy/utils/lib/getFileNameAndExtension'\nimport { getSafeFileId } from '@uppy/utils/lib/generateFileID'\nimport supportsUploadProgress from './supportsUploadProgress.js'\nimport getFileName from './getFileName.js'\nimport { justErrorsLogger, debugLogger } from './loggers.js'\nimport {\n  Restricter,\n  defaultOptions as defaultRestrictionOptions,\n  RestrictionError,\n} from './Restricter.js'\n\nimport packageJson from '../package.json'\nimport locale from './locale.js'\n\n/**\n * Uppy Core module.\n * Manages plugins, state updates, acts as an event bus,\n * adds/removes files and metadata.\n */\nclass Uppy {\n  static VERSION = packageJson.version\n\n  /** @type {Record<string, BasePlugin[]>} */\n  #plugins = Object.create(null)\n\n  #restricter\n\n  #storeUnsubscribe\n\n  #emitter = ee()\n\n  #preProcessors = new Set()\n\n  #uploaders = new Set()\n\n  #postProcessors = new Set()\n\n  /**\n   * Instantiate Uppy\n   *\n   * @param {object} opts — Uppy options\n   */\n  constructor (opts) {\n    this.defaultLocale = locale\n\n    const defaultOptions = {\n      id: 'uppy',\n      autoProceed: false,\n      allowMultipleUploadBatches: true,\n      debug: false,\n      restrictions: defaultRestrictionOptions,\n      meta: {},\n      onBeforeFileAdded: (currentFile) => currentFile,\n      onBeforeUpload: (files) => files,\n      store: new DefaultStore(),\n      logger: justErrorsLogger,\n      infoTimeout: 5000,\n    }\n\n    // Merge default options with the ones set by user,\n    // making sure to merge restrictions too\n    this.opts = {\n      ...defaultOptions,\n      ...opts,\n      restrictions: {\n        ...defaultOptions.restrictions,\n        ...(opts && opts.restrictions),\n      },\n    }\n\n    // Support debug: true for backwards-compatability, unless logger is set in opts\n    // opts instead of this.opts to avoid comparing objects — we set logger: justErrorsLogger in defaultOptions\n    if (opts && opts.logger && opts.debug) {\n      this.log('You are using a custom `logger`, but also set `debug: true`, which uses built-in logger to output logs to console. Ignoring `debug: true` and using your custom `logger`.', 'warning')\n    } else if (opts && opts.debug) {\n      this.opts.logger = debugLogger\n    }\n\n    this.log(`Using Core v${this.constructor.VERSION}`)\n\n    this.i18nInit()\n\n    // ___Why throttle at 500ms?\n    //    - We must throttle at >250ms for superfocus in Dashboard to work well\n    //    (because animation takes 0.25s, and we want to wait for all animations to be over before refocusing).\n    //    [Practical Check]: if thottle is at 100ms, then if you are uploading a file,\n    //    and click 'ADD MORE FILES', - focus won't activate in Firefox.\n    //    - We must throttle at around >500ms to avoid performance lags.\n    //    [Practical Check] Firefox, try to upload a big file for a prolonged period of time. Laptop will start to heat up.\n    this.calculateProgress = throttle(this.calculateProgress.bind(this), 500, { leading: true, trailing: true })\n\n    this.store = this.opts.store\n    this.setState({\n      plugins: {},\n      files: {},\n      currentUploads: {},\n      allowNewUpload: true,\n      capabilities: {\n        uploadProgress: supportsUploadProgress(),\n        individualCancellation: true,\n        resumableUploads: false,\n      },\n      totalProgress: 0,\n      meta: { ...this.opts.meta },\n      info: [],\n      recoveredState: null,\n    })\n\n    this.#restricter = new Restricter(() => this.opts, this.i18n)\n\n    this.#storeUnsubscribe = this.store.subscribe((prevState, nextState, patch) => {\n      this.emit('state-update', prevState, nextState, patch)\n      this.updateAll(nextState)\n    })\n\n    // Exposing uppy object on window for debugging and testing\n    if (this.opts.debug && typeof window !== 'undefined') {\n      window[this.opts.id] = this\n    }\n\n    this.#addListeners()\n  }\n\n  emit (event, ...args) {\n    this.#emitter.emit(event, ...args)\n  }\n\n  on (event, callback) {\n    this.#emitter.on(event, callback)\n    return this\n  }\n\n  once (event, callback) {\n    this.#emitter.once(event, callback)\n    return this\n  }\n\n  off (event, callback) {\n    this.#emitter.off(event, callback)\n    return this\n  }\n\n  /**\n   * Iterate on all plugins and run `update` on them.\n   * Called each time state changes.\n   *\n   */\n  updateAll (state) {\n    this.iteratePlugins(plugin => {\n      plugin.update(state)\n    })\n  }\n\n  /**\n   * Updates state with a patch\n   *\n   * @param {object} patch {foo: 'bar'}\n   */\n  setState (patch) {\n    this.store.setState(patch)\n  }\n\n  /**\n   * Returns current state.\n   *\n   * @returns {object}\n   */\n  getState () {\n    return this.store.getState()\n  }\n\n  patchFilesState (filesWithNewState) {\n    const existingFilesState = this.getState().files\n\n    this.setState({\n      files: {\n        ...existingFilesState,\n        ...Object.fromEntries(Object.entries(filesWithNewState).map(([fileID, newFileState]) => ([\n          fileID,\n          {\n            ...existingFilesState[fileID],\n            ...newFileState,\n          },\n        ]))),\n      },\n    })\n  }\n\n  /**\n   * Shorthand to set state for a specific file.\n   */\n  setFileState (fileID, state) {\n    if (!this.getState().files[fileID]) {\n      throw new Error(`Can’t set state for ${fileID} (the file could have been removed)`)\n    }\n\n    this.patchFilesState({ [fileID]: state })\n  }\n\n  i18nInit () {\n    const translator = new Translator([this.defaultLocale, this.opts.locale])\n    this.i18n = translator.translate.bind(translator)\n    this.i18nArray = translator.translateArray.bind(translator)\n    this.locale = translator.locale\n  }\n\n  setOptions (newOpts) {\n    this.opts = {\n      ...this.opts,\n      ...newOpts,\n      restrictions: {\n        ...this.opts.restrictions,\n        ...(newOpts && newOpts.restrictions),\n      },\n    }\n\n    if (newOpts.meta) {\n      this.setMeta(newOpts.meta)\n    }\n\n    this.i18nInit()\n\n    if (newOpts.locale) {\n      this.iteratePlugins((plugin) => {\n        plugin.setOptions(newOpts)\n      })\n    }\n\n    // Note: this is not the preact `setState`, it's an internal function that has the same name.\n    this.setState() // so that UI re-renders with new options\n  }\n\n  resetProgress () {\n    const defaultProgress = {\n      percentage: 0,\n      bytesUploaded: 0,\n      uploadComplete: false,\n      uploadStarted: null,\n    }\n    const files = { ...this.getState().files }\n    const updatedFiles = {}\n\n    Object.keys(files).forEach(fileID => {\n      updatedFiles[fileID] = {\n        ...files[fileID],\n        progress: {\n          ...files[fileID].progress, ...defaultProgress,\n        },\n      }\n    })\n\n    this.setState({\n      files: updatedFiles,\n      totalProgress: 0,\n      allowNewUpload: true,\n      error: null,\n      recoveredState: null,\n    })\n\n    this.emit('reset-progress')\n  }\n\n  addPreProcessor (fn) {\n    this.#preProcessors.add(fn)\n  }\n\n  removePreProcessor (fn) {\n    return this.#preProcessors.delete(fn)\n  }\n\n  addPostProcessor (fn) {\n    this.#postProcessors.add(fn)\n  }\n\n  removePostProcessor (fn) {\n    return this.#postProcessors.delete(fn)\n  }\n\n  addUploader (fn) {\n    this.#uploaders.add(fn)\n  }\n\n  removeUploader (fn) {\n    return this.#uploaders.delete(fn)\n  }\n\n  setMeta (data) {\n    const updatedMeta = { ...this.getState().meta, ...data }\n    const updatedFiles = { ...this.getState().files }\n\n    Object.keys(updatedFiles).forEach((fileID) => {\n      updatedFiles[fileID] = { ...updatedFiles[fileID], meta: { ...updatedFiles[fileID].meta, ...data } }\n    })\n\n    this.log('Adding metadata:')\n    this.log(data)\n\n    this.setState({\n      meta: updatedMeta,\n      files: updatedFiles,\n    })\n  }\n\n  setFileMeta (fileID, data) {\n    const updatedFiles = { ...this.getState().files }\n    if (!updatedFiles[fileID]) {\n      this.log('Was trying to set metadata for a file that has been removed: ', fileID)\n      return\n    }\n    const newMeta = { ...updatedFiles[fileID].meta, ...data }\n    updatedFiles[fileID] = { ...updatedFiles[fileID], meta: newMeta }\n    this.setState({ files: updatedFiles })\n  }\n\n  /**\n   * Get a file object.\n   *\n   * @param {string} fileID The ID of the file object to return.\n   */\n  getFile (fileID) {\n    return this.getState().files[fileID]\n  }\n\n  /**\n   * Get all files in an array.\n   */\n  getFiles () {\n    const { files } = this.getState()\n    return Object.values(files)\n  }\n\n  getFilesByIds (ids) {\n    return ids.map((id) => this.getFile(id))\n  }\n\n  getObjectOfFilesPerState () {\n    const { files: filesObject, totalProgress, error } = this.getState()\n    const files = Object.values(filesObject)\n    const inProgressFiles = files.filter(({ progress }) => !progress.uploadComplete && progress.uploadStarted)\n    const newFiles =  files.filter((file) => !file.progress.uploadStarted)\n    const startedFiles = files.filter(\n      file => file.progress.uploadStarted || file.progress.preprocess || file.progress.postprocess,\n    )\n    const uploadStartedFiles = files.filter((file) => file.progress.uploadStarted)\n    const pausedFiles = files.filter((file) => file.isPaused)\n    const completeFiles = files.filter((file) => file.progress.uploadComplete)\n    const erroredFiles = files.filter((file) => file.error)\n    const inProgressNotPausedFiles = inProgressFiles.filter((file) => !file.isPaused)\n    const processingFiles = files.filter((file) => file.progress.preprocess || file.progress.postprocess)\n\n    return {\n      newFiles,\n      startedFiles,\n      uploadStartedFiles,\n      pausedFiles,\n      completeFiles,\n      erroredFiles,\n      inProgressFiles,\n      inProgressNotPausedFiles,\n      processingFiles,\n\n      isUploadStarted: uploadStartedFiles.length > 0,\n      isAllComplete: totalProgress === 100\n        && completeFiles.length === files.length\n        && processingFiles.length === 0,\n      isAllErrored: !!error && erroredFiles.length === files.length,\n      isAllPaused: inProgressFiles.length !== 0 && pausedFiles.length === inProgressFiles.length,\n      isUploadInProgress: inProgressFiles.length > 0,\n      isSomeGhost: files.some(file => file.isGhost),\n    }\n  }\n\n  /*\n  * @constructs\n  * @param { Error[] } errors\n  * @param { undefined } file\n  */\n  /*\n  * @constructs\n  * @param { RestrictionError } error\n  */\n  #informAndEmit (errors) {\n    for (const error of errors) {\n      const { file, isRestriction } = error\n\n      if (isRestriction) {\n        this.emit('restriction-failed', file, error)\n      } else {\n        this.emit('error', error)\n      }\n      this.log(error, 'warning')\n    }\n\n    const userFacingErrors = errors.filter((error) => error.isUserFacing)\n\n    // don't flood the user: only show the first 4 toasts\n    const maxNumToShow = 4\n    const firstErrors = userFacingErrors.slice(0, maxNumToShow)\n    const additionalErrors = userFacingErrors.slice(maxNumToShow)\n    firstErrors.forEach(({ message, details = '' }) => {\n      this.info({ message, details }, 'error', this.opts.infoTimeout)\n    })\n\n    if (additionalErrors.length > 0) {\n      this.info({ message: this.i18n('additionalRestrictionsFailed', { count: additionalErrors.length }) })\n    }\n  }\n\n  validateRestrictions (file, files = this.getFiles()) {\n    try {\n      this.#restricter.validate(files, [file])\n    } catch (err) {\n      return err\n    }\n    return null\n  }\n\n  #checkRequiredMetaFieldsOnFile (file) {\n    const { missingFields, error } = this.#restricter.getMissingRequiredMetaFields(file)\n\n    if (missingFields.length > 0) {\n      this.setFileState(file.id, { missingRequiredMetaFields: missingFields })\n      this.log(error.message)\n      this.emit('restriction-failed', file, error)\n      return false\n    }\n    return true\n  }\n\n  #checkRequiredMetaFields (files) {\n    let success = true\n    for (const file of Object.values(files)) {\n      if (!this.#checkRequiredMetaFieldsOnFile(file)) {\n        success = false\n      }\n    }\n    return success\n  }\n\n  #assertNewUploadAllowed (file) {\n    const { allowNewUpload } = this.getState()\n\n    if (allowNewUpload === false) {\n      const error = new RestrictionError(this.i18n('noMoreFilesAllowed'), { file })\n      this.#informAndEmit([error])\n      throw error\n    }\n  }\n\n  checkIfFileAlreadyExists (fileID) {\n    const { files } = this.getState()\n\n    if (files[fileID] && !files[fileID].isGhost) {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Create a file state object based on user-provided `addFile()` options.\n   */\n  #transformFile (fileDescriptorOrFile) {\n    // Uppy expects files in { name, type, size, data } format.\n    // If the actual File object is passed from input[type=file] or drag-drop,\n    // we normalize it to match Uppy file object\n    const fileDescriptor = fileDescriptorOrFile instanceof File ? {\n      name: fileDescriptorOrFile.name,\n      type: fileDescriptorOrFile.type,\n      size: fileDescriptorOrFile.size,\n      data: fileDescriptorOrFile,\n    } : fileDescriptorOrFile\n\n    const fileType = getFileType(fileDescriptor)\n    const fileName = getFileName(fileType, fileDescriptor)\n    const fileExtension = getFileNameAndExtension(fileName).extension\n    const isRemote = Boolean(fileDescriptor.isRemote)\n    const id = getSafeFileId(fileDescriptor)\n\n    const meta = fileDescriptor.meta || {}\n    meta.name = fileName\n    meta.type = fileType\n\n    // `null` means the size is unknown.\n    const size = Number.isFinite(fileDescriptor.data.size) ? fileDescriptor.data.size : null\n\n    return {\n      source: fileDescriptor.source || '',\n      id,\n      name: fileName,\n      extension: fileExtension || '',\n      meta: {\n        ...this.getState().meta,\n        ...meta,\n      },\n      type: fileType,\n      data: fileDescriptor.data,\n      progress: {\n        percentage: 0,\n        bytesUploaded: 0,\n        bytesTotal: size,\n        uploadComplete: false,\n        uploadStarted: null,\n      },\n      size,\n      isRemote,\n      remote: fileDescriptor.remote || '',\n      preview: fileDescriptor.preview,\n    }\n  }\n\n  // Schedule an upload if `autoProceed` is enabled.\n  #startIfAutoProceed () {\n    if (this.opts.autoProceed && !this.scheduledAutoProceed) {\n      this.scheduledAutoProceed = setTimeout(() => {\n        this.scheduledAutoProceed = null\n        this.upload().catch((err) => {\n          if (!err.isRestriction) {\n            this.log(err.stack || err.message || err)\n          }\n        })\n      }, 4)\n    }\n  }\n\n  #checkAndUpdateFileState (filesToAdd) {\n    const { files: existingFiles } = this.getState()\n\n    // create a copy of the files object only once\n    const nextFilesState = { ...existingFiles }\n    const validFilesToAdd = []\n    const errors = []\n\n    for (const fileToAdd of filesToAdd) {\n      try {\n        let newFile = this.#transformFile(fileToAdd)\n\n        // If a file has been recovered (Golden Retriever), but we were unable to recover its data (probably too large),\n        // users are asked to re-select these half-recovered files and then this method will be called again.\n        // In order to keep the progress, meta and everthing else, we keep the existing file,\n        // but we replace `data`, and we remove `isGhost`, because the file is no longer a ghost now\n        if (existingFiles[newFile.id]?.isGhost) {\n          const { isGhost, ...existingFileState } = existingFiles[newFile.id]\n          newFile = {\n            ...existingFileState,\n            data: fileToAdd.data,\n          }\n          this.log(`Replaced the blob in the restored ghost file: ${newFile.name}, ${newFile.id}`)\n        }\n\n        if (this.checkIfFileAlreadyExists(newFile.id)) {\n          throw new RestrictionError(this.i18n('noDuplicates', { fileName: newFile.name }), { file: fileToAdd })\n        }\n\n        const onBeforeFileAddedResult = this.opts.onBeforeFileAdded(newFile, nextFilesState)\n\n        if (onBeforeFileAddedResult === false) {\n          // Don’t show UI info for this error, as it should be done by the developer\n          throw new RestrictionError('Cannot add the file because onBeforeFileAdded returned false.', { isUserFacing: false, file: fileToAdd })\n        } else if (typeof onBeforeFileAddedResult === 'object' && onBeforeFileAddedResult !== null) {\n          newFile = onBeforeFileAddedResult\n        }\n\n        this.#restricter.validateSingleFile(newFile)\n\n        // need to add it to the new local state immediately, so we can use the state to validate the next files too\n        nextFilesState[newFile.id] = newFile\n        validFilesToAdd.push(newFile)\n      } catch (err) {\n        errors.push(err)\n      }\n    }\n\n    try {\n      // need to run this separately because it's much more slow, so if we run it inside the for-loop it will be very slow\n      // when many files are added\n      this.#restricter.validateAggregateRestrictions(Object.values(existingFiles), validFilesToAdd)\n    } catch (err) {\n      errors.push(err)\n\n      // If we have any aggregate error, don't allow adding this batch\n      return {\n        nextFilesState: existingFiles,\n        validFilesToAdd: [],\n        errors,\n      }\n    }\n\n    return {\n      nextFilesState,\n      validFilesToAdd,\n      errors,\n    }\n  }\n\n  /**\n   * Add a new file to `state.files`. This will run `onBeforeFileAdded`,\n   * try to guess file type in a clever way, check file against restrictions,\n   * and start an upload if `autoProceed === true`.\n   *\n   * @param {object} file object to add\n   * @returns {string} id for the added file\n   */\n  addFile (file) {\n    this.#assertNewUploadAllowed(file)\n\n    const { nextFilesState, validFilesToAdd, errors } = this.#checkAndUpdateFileState([file])\n\n    const restrictionErrors = errors.filter((error) => error.isRestriction)\n    this.#informAndEmit(restrictionErrors)\n\n    if (errors.length > 0) throw errors[0]\n\n    this.setState({ files: nextFilesState })\n\n    const [firstValidFileToAdd] = validFilesToAdd\n\n    this.emit('file-added', firstValidFileToAdd)\n    this.emit('files-added', validFilesToAdd)\n    this.log(`Added file: ${firstValidFileToAdd.name}, ${firstValidFileToAdd.id}, mime type: ${firstValidFileToAdd.type}`)\n\n    this.#startIfAutoProceed()\n\n    return firstValidFileToAdd.id\n  }\n\n  /**\n   * Add multiple files to `state.files`. See the `addFile()` documentation.\n   *\n   * If an error occurs while adding a file, it is logged and the user is notified.\n   * This is good for UI plugins, but not for programmatic use.\n   * Programmatic users should usually still use `addFile()` on individual files.\n   */\n  addFiles (fileDescriptors) {\n    this.#assertNewUploadAllowed()\n\n    const { nextFilesState, validFilesToAdd, errors } = this.#checkAndUpdateFileState(fileDescriptors)\n\n    const restrictionErrors = errors.filter((error) => error.isRestriction)\n    this.#informAndEmit(restrictionErrors)\n\n    const nonRestrictionErrors = errors.filter((error) => !error.isRestriction)\n\n    if (nonRestrictionErrors.length > 0) {\n      let message = 'Multiple errors occurred while adding files:\\n'\n      nonRestrictionErrors.forEach((subError) => {\n        message += `\\n * ${subError.message}`\n      })\n\n      this.info({\n        message: this.i18n('addBulkFilesFailed', { smart_count: nonRestrictionErrors.length }),\n        details: message,\n      }, 'error', this.opts.infoTimeout)\n\n      if (typeof AggregateError === 'function') {\n        throw new AggregateError(nonRestrictionErrors, message)\n      } else {\n        const err = new Error(message)\n        err.errors = nonRestrictionErrors\n        throw err\n      }\n    }\n\n    // OK, we haven't thrown an error, we can start updating state and emitting events now:\n\n    this.setState({ files: nextFilesState })\n\n    validFilesToAdd.forEach((file) => {\n      this.emit('file-added', file)\n    })\n\n    this.emit('files-added', validFilesToAdd)\n\n    if (validFilesToAdd.length > 5) {\n      this.log(`Added batch of ${validFilesToAdd.length} files`)\n    } else {\n      Object.values(validFilesToAdd).forEach((file) => {\n        this.log(`Added file: ${file.name}\\n id: ${file.id}\\n type: ${file.type}`)\n      })\n    }\n\n    if (validFilesToAdd.length > 0) {\n      this.#startIfAutoProceed()\n    }\n  }\n\n  removeFiles (fileIDs, reason) {\n    const { files, currentUploads } = this.getState()\n    const updatedFiles = { ...files }\n    const updatedUploads = { ...currentUploads }\n\n    const removedFiles = Object.create(null)\n    fileIDs.forEach((fileID) => {\n      if (files[fileID]) {\n        removedFiles[fileID] = files[fileID]\n        delete updatedFiles[fileID]\n      }\n    })\n\n    // Remove files from the `fileIDs` list in each upload.\n    function fileIsNotRemoved (uploadFileID) {\n      return removedFiles[uploadFileID] === undefined\n    }\n\n    Object.keys(updatedUploads).forEach((uploadID) => {\n      const newFileIDs = currentUploads[uploadID].fileIDs.filter(fileIsNotRemoved)\n\n      // Remove the upload if no files are associated with it anymore.\n      if (newFileIDs.length === 0) {\n        delete updatedUploads[uploadID]\n        return\n      }\n\n      const { capabilities } = this.getState()\n      if (newFileIDs.length !== currentUploads[uploadID].fileIDs.length\n          && !capabilities.individualCancellation) {\n        throw new Error('individualCancellation is disabled')\n      }\n\n      updatedUploads[uploadID] = {\n        ...currentUploads[uploadID],\n        fileIDs: newFileIDs,\n      }\n    })\n\n    const stateUpdate = {\n      currentUploads: updatedUploads,\n      files: updatedFiles,\n    }\n\n    // If all files were removed - allow new uploads,\n    // and clear recoveredState\n    if (Object.keys(updatedFiles).length === 0) {\n      stateUpdate.allowNewUpload = true\n      stateUpdate.error = null\n      stateUpdate.recoveredState = null\n    }\n\n    this.setState(stateUpdate)\n    this.calculateTotalProgress()\n\n    const removedFileIDs = Object.keys(removedFiles)\n    removedFileIDs.forEach((fileID) => {\n      this.emit('file-removed', removedFiles[fileID], reason)\n    })\n\n    if (removedFileIDs.length > 5) {\n      this.log(`Removed ${removedFileIDs.length} files`)\n    } else {\n      this.log(`Removed files: ${removedFileIDs.join(', ')}`)\n    }\n  }\n\n  removeFile (fileID, reason = null) {\n    this.removeFiles([fileID], reason)\n  }\n\n  pauseResume (fileID) {\n    if (!this.getState().capabilities.resumableUploads\n         || this.getFile(fileID).uploadComplete) {\n      return undefined\n    }\n\n    const wasPaused = this.getFile(fileID).isPaused || false\n    const isPaused = !wasPaused\n\n    this.setFileState(fileID, {\n      isPaused,\n    })\n\n    this.emit('upload-pause', fileID, isPaused)\n\n    return isPaused\n  }\n\n  pauseAll () {\n    const updatedFiles = { ...this.getState().files }\n    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter((file) => {\n      return !updatedFiles[file].progress.uploadComplete\n             && updatedFiles[file].progress.uploadStarted\n    })\n\n    inProgressUpdatedFiles.forEach((file) => {\n      const updatedFile = { ...updatedFiles[file], isPaused: true }\n      updatedFiles[file] = updatedFile\n    })\n\n    this.setState({ files: updatedFiles })\n    this.emit('pause-all')\n  }\n\n  resumeAll () {\n    const updatedFiles = { ...this.getState().files }\n    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter((file) => {\n      return !updatedFiles[file].progress.uploadComplete\n             && updatedFiles[file].progress.uploadStarted\n    })\n\n    inProgressUpdatedFiles.forEach((file) => {\n      const updatedFile = {\n        ...updatedFiles[file],\n        isPaused: false,\n        error: null,\n      }\n      updatedFiles[file] = updatedFile\n    })\n    this.setState({ files: updatedFiles })\n\n    this.emit('resume-all')\n  }\n\n  retryAll () {\n    const updatedFiles = { ...this.getState().files }\n    const filesToRetry = Object.keys(updatedFiles).filter(file => {\n      return updatedFiles[file].error\n    })\n\n    filesToRetry.forEach((file) => {\n      const updatedFile = {\n        ...updatedFiles[file],\n        isPaused: false,\n        error: null,\n      }\n      updatedFiles[file] = updatedFile\n    })\n    this.setState({\n      files: updatedFiles,\n      error: null,\n    })\n\n    this.emit('retry-all', filesToRetry)\n\n    if (filesToRetry.length === 0) {\n      return Promise.resolve({\n        successful: [],\n        failed: [],\n      })\n    }\n\n    const uploadID = this.#createUpload(filesToRetry, {\n      forceAllowNewUpload: true, // create new upload even if allowNewUpload: false\n    })\n    return this.#runUpload(uploadID)\n  }\n\n  cancelAll ({ reason = 'user' } = {}) {\n    this.emit('cancel-all', { reason })\n\n    // Only remove existing uploads if user is canceling\n    if (reason === 'user') {\n      const { files } = this.getState()\n\n      const fileIDs = Object.keys(files)\n      if (fileIDs.length) {\n        this.removeFiles(fileIDs, 'cancel-all')\n      }\n\n      this.setState({\n        totalProgress: 0,\n        error: null,\n        recoveredState: null,\n      })\n    }\n  }\n\n  retryUpload (fileID) {\n    this.setFileState(fileID, {\n      error: null,\n      isPaused: false,\n    })\n\n    this.emit('upload-retry', fileID)\n\n    const uploadID = this.#createUpload([fileID], {\n      forceAllowNewUpload: true, // create new upload even if allowNewUpload: false\n    })\n    return this.#runUpload(uploadID)\n  }\n\n  logout () {\n    this.iteratePlugins(plugin => {\n      if (plugin.provider && plugin.provider.logout) {\n        plugin.provider.logout()\n      }\n    })\n  }\n\n  calculateProgress (file, data) {\n    if (file == null || !this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file?.id}`)\n      return\n    }\n\n    // bytesTotal may be null or zero; in that case we can't divide by it\n    const canHavePercentage = Number.isFinite(data.bytesTotal) && data.bytesTotal > 0\n    this.setFileState(file.id, {\n      progress: {\n        ...this.getFile(file.id).progress,\n        bytesUploaded: data.bytesUploaded,\n        bytesTotal: data.bytesTotal,\n        percentage: canHavePercentage\n          ? Math.round((data.bytesUploaded / data.bytesTotal) * 100)\n          : 0,\n      },\n    })\n\n    this.calculateTotalProgress()\n  }\n\n  calculateTotalProgress () {\n    // calculate total progress, using the number of files currently uploading,\n    // multiplied by 100 and the summ of individual progress of each file\n    const files = this.getFiles()\n\n    const inProgress = files.filter((file) => {\n      return file.progress.uploadStarted\n        || file.progress.preprocess\n        || file.progress.postprocess\n    })\n\n    if (inProgress.length === 0) {\n      this.emit('progress', 0)\n      this.setState({ totalProgress: 0 })\n      return\n    }\n\n    const sizedFiles = inProgress.filter((file) => file.progress.bytesTotal != null)\n    const unsizedFiles = inProgress.filter((file) => file.progress.bytesTotal == null)\n\n    if (sizedFiles.length === 0) {\n      const progressMax = inProgress.length * 100\n      const currentProgress = unsizedFiles.reduce((acc, file) => {\n        return acc + file.progress.percentage\n      }, 0)\n      const totalProgress = Math.round((currentProgress / progressMax) * 100)\n      this.setState({ totalProgress })\n      return\n    }\n\n    let totalSize = sizedFiles.reduce((acc, file) => {\n      return acc + file.progress.bytesTotal\n    }, 0)\n    const averageSize = totalSize / sizedFiles.length\n    totalSize += averageSize * unsizedFiles.length\n\n    let uploadedSize = 0\n    sizedFiles.forEach((file) => {\n      uploadedSize += file.progress.bytesUploaded\n    })\n    unsizedFiles.forEach((file) => {\n      uploadedSize += (averageSize * (file.progress.percentage || 0)) / 100\n    })\n\n    let totalProgress = totalSize === 0\n      ? 0\n      : Math.round((uploadedSize / totalSize) * 100)\n\n    // hot fix, because:\n    // uploadedSize ended up larger than totalSize, resulting in 1325% total\n    if (totalProgress > 100) {\n      totalProgress = 100\n    }\n\n    this.setState({ totalProgress })\n    this.emit('progress', totalProgress)\n  }\n\n  /**\n   * Registers listeners for all global actions, like:\n   * `error`, `file-removed`, `upload-progress`\n   */\n  #addListeners () {\n    /**\n     * @param {Error} error\n     * @param {object} [file]\n     * @param {object} [response]\n     */\n    const errorHandler = (error, file, response) => {\n      let errorMsg = error.message || 'Unknown error'\n      if (error.details) {\n        errorMsg += ` ${error.details}`\n      }\n\n      this.setState({ error: errorMsg })\n\n      if (file != null && file.id in this.getState().files) {\n        this.setFileState(file.id, {\n          error: errorMsg,\n          response,\n        })\n      }\n    }\n\n    this.on('error', errorHandler)\n\n    this.on('upload-error', (file, error, response) => {\n      errorHandler(error, file, response)\n\n      if (typeof error === 'object' && error.message) {\n        const newError = new Error(error.message)\n        newError.isUserFacing = true // todo maybe don't do this with all errors?\n        newError.details = error.message\n        if (error.details) {\n          newError.details += ` ${error.details}`\n        }\n        newError.message = this.i18n('failedToUpload', { file: file?.name })\n        this.#informAndEmit([newError])\n      } else {\n        this.#informAndEmit([error])\n      }\n    })\n\n    let uploadStalledWarningRecentlyEmitted\n    this.on('upload-stalled', (error, files) => {\n      const { message } = error\n      const details = files.map(file => file.meta.name).join(', ')\n      if (!uploadStalledWarningRecentlyEmitted) {\n        this.info({ message, details }, 'warning', this.opts.infoTimeout)\n        uploadStalledWarningRecentlyEmitted = setTimeout(() => {\n          uploadStalledWarningRecentlyEmitted = null\n        }, this.opts.infoTimeout)\n      }\n      this.log(`${message} ${details}`.trim(), 'warning')\n    })\n\n    this.on('upload', () => {\n      this.setState({ error: null })\n    })\n\n    const onUploadStarted = (files) => {\n      const filesFiltered = files.filter((file) => {\n        const exists = (file != null && this.getFile(file.id))\n        if (!exists) this.log(`Not setting progress for a file that has been removed: ${file?.id}`)\n        return exists\n      })\n\n      const filesState = Object.fromEntries(filesFiltered.map((file) => ([\n        file.id,\n        {\n          progress: {\n            uploadStarted: Date.now(),\n            uploadComplete: false,\n            percentage: 0,\n            bytesUploaded: 0,\n            bytesTotal: file.size,\n          },\n        },\n      ])))\n\n      this.patchFilesState(filesState)\n    }\n\n    this.on('upload-start', (files) => {\n      files.forEach((file) => {\n        // todo backward compat, remove this event in a next major\n        this.emit('upload-started', file)\n      })\n      onUploadStarted(files)\n    })\n\n    this.on('upload-progress', this.calculateProgress)\n\n    this.on('upload-success', (file, uploadResp) => {\n      if (file == null || !this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file?.id}`)\n        return\n      }\n\n      const currentProgress = this.getFile(file.id).progress\n      this.setFileState(file.id, {\n        progress: {\n          ...currentProgress,\n          postprocess: this.#postProcessors.size > 0 ? {\n            mode: 'indeterminate',\n          } : null,\n          uploadComplete: true,\n          percentage: 100,\n          bytesUploaded: currentProgress.bytesTotal,\n        },\n        response: uploadResp,\n        uploadURL: uploadResp.uploadURL,\n        isPaused: false,\n      })\n\n      // Remote providers sometimes don't tell us the file size,\n      // but we can know how many bytes we uploaded once the upload is complete.\n      if (file.size == null) {\n        this.setFileState(file.id, {\n          size: uploadResp.bytesUploaded || currentProgress.bytesTotal,\n        })\n      }\n\n      this.calculateTotalProgress()\n    })\n\n    this.on('preprocess-progress', (file, progress) => {\n      if (file == null || !this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file?.id}`)\n        return\n      }\n      this.setFileState(file.id, {\n        progress: { ...this.getFile(file.id).progress, preprocess: progress },\n      })\n    })\n\n    this.on('preprocess-complete', (file) => {\n      if (file == null || !this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file?.id}`)\n        return\n      }\n      const files = { ...this.getState().files }\n      files[file.id] = { ...files[file.id], progress: { ...files[file.id].progress } }\n      delete files[file.id].progress.preprocess\n\n      this.setState({ files })\n    })\n\n    this.on('postprocess-progress', (file, progress) => {\n      if (file == null || !this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file?.id}`)\n        return\n      }\n      this.setFileState(file.id, {\n        progress: { ...this.getState().files[file.id].progress, postprocess: progress },\n      })\n    })\n\n    this.on('postprocess-complete', (file) => {\n      if (file == null || !this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file?.id}`)\n        return\n      }\n      const files = {\n        ...this.getState().files,\n      }\n      files[file.id] = {\n        ...files[file.id],\n        progress: {\n          ...files[file.id].progress,\n        },\n      }\n      delete files[file.id].progress.postprocess\n\n      this.setState({ files })\n    })\n\n    this.on('restored', () => {\n      // Files may have changed--ensure progress is still accurate.\n      this.calculateTotalProgress()\n    })\n\n    this.on('dashboard:file-edit-complete', (file) => {\n      if (file) {\n        this.#checkRequiredMetaFieldsOnFile(file)\n      }\n    })\n\n    // show informer if offline\n    if (typeof window !== 'undefined' && window.addEventListener) {\n      window.addEventListener('online', this.#updateOnlineStatus)\n      window.addEventListener('offline', this.#updateOnlineStatus)\n      setTimeout(this.#updateOnlineStatus, 3000)\n    }\n  }\n\n  updateOnlineStatus () {\n    const online = typeof window.navigator.onLine !== 'undefined'\n      ? window.navigator.onLine\n      : true\n    if (!online) {\n      this.emit('is-offline')\n      this.info(this.i18n('noInternetConnection'), 'error', 0)\n      this.wasOffline = true\n    } else {\n      this.emit('is-online')\n      if (this.wasOffline) {\n        this.emit('back-online')\n        this.info(this.i18n('connectedToInternet'), 'success', 3000)\n        this.wasOffline = false\n      }\n    }\n  }\n\n  #updateOnlineStatus = this.updateOnlineStatus.bind(this)\n\n  getID () {\n    return this.opts.id\n  }\n\n  /**\n   * Registers a plugin with Core.\n   *\n   * @param {object} Plugin object\n   * @param {object} [opts] object with options to be passed to Plugin\n   * @returns {object} self for chaining\n   */\n  // eslint-disable-next-line no-shadow\n  use (Plugin, opts) {\n    if (typeof Plugin !== 'function') {\n      const msg = `Expected a plugin class, but got ${Plugin === null ? 'null' : typeof Plugin}.`\n        + ' Please verify that the plugin was imported and spelled correctly.'\n      throw new TypeError(msg)\n    }\n\n    // Instantiate\n    const plugin = new Plugin(this, opts)\n    const pluginId = plugin.id\n\n    if (!pluginId) {\n      throw new Error('Your plugin must have an id')\n    }\n\n    if (!plugin.type) {\n      throw new Error('Your plugin must have a type')\n    }\n\n    const existsPluginAlready = this.getPlugin(pluginId)\n    if (existsPluginAlready) {\n      const msg = `Already found a plugin named '${existsPluginAlready.id}'. `\n        + `Tried to use: '${pluginId}'.\\n`\n        + 'Uppy plugins must have unique `id` options. See https://uppy.io/docs/plugins/#id.'\n      throw new Error(msg)\n    }\n\n    if (Plugin.VERSION) {\n      this.log(`Using ${pluginId} v${Plugin.VERSION}`)\n    }\n\n    if (plugin.type in this.#plugins) {\n      this.#plugins[plugin.type].push(plugin)\n    } else {\n      this.#plugins[plugin.type] = [plugin]\n    }\n    plugin.install()\n\n    return this\n  }\n\n  /**\n   * Find one Plugin by name.\n   *\n   * @param {string} id plugin id\n   * @returns {BasePlugin|undefined}\n   */\n  getPlugin (id) {\n    for (const plugins of Object.values(this.#plugins)) {\n      const foundPlugin = plugins.find(plugin => plugin.id === id)\n      if (foundPlugin != null) return foundPlugin\n    }\n    return undefined\n  }\n\n  [Symbol.for('uppy test: getPlugins')] (type) {\n    return this.#plugins[type]\n  }\n\n  /**\n   * Iterate through all `use`d plugins.\n   *\n   * @param {Function} method that will be run on each plugin\n   */\n  iteratePlugins (method) {\n    Object.values(this.#plugins).flat(1).forEach(method)\n  }\n\n  /**\n   * Uninstall and remove a plugin.\n   *\n   * @param {object} instance The plugin instance to remove.\n   */\n  removePlugin (instance) {\n    this.log(`Removing plugin ${instance.id}`)\n    this.emit('plugin-remove', instance)\n\n    if (instance.uninstall) {\n      instance.uninstall()\n    }\n\n    const list = this.#plugins[instance.type]\n    // list.indexOf failed here, because Vue3 converted the plugin instance\n    // to a Proxy object, which failed the strict comparison test:\n    // obj !== objProxy\n    const index = list.findIndex(item => item.id === instance.id)\n    if (index !== -1) {\n      list.splice(index, 1)\n    }\n\n    const state = this.getState()\n    const updatedState = {\n      plugins: {\n        ...state.plugins,\n        [instance.id]: undefined,\n      },\n    }\n    this.setState(updatedState)\n  }\n\n  /**\n   * Uninstall all plugins and close down this Uppy instance.\n   */\n  close ({ reason } = {}) {\n    this.log(`Closing Uppy instance ${this.opts.id}: removing all files and uninstalling plugins`)\n\n    this.cancelAll({ reason })\n\n    this.#storeUnsubscribe()\n\n    this.iteratePlugins((plugin) => {\n      this.removePlugin(plugin)\n    })\n\n    if (typeof window !== 'undefined' && window.removeEventListener) {\n      window.removeEventListener('online', this.#updateOnlineStatus)\n      window.removeEventListener('offline', this.#updateOnlineStatus)\n    }\n  }\n\n  hideInfo () {\n    const { info } = this.getState()\n\n    this.setState({ info: info.slice(1) })\n\n    this.emit('info-hidden')\n  }\n\n  /**\n   * Set info message in `state.info`, so that UI plugins like `Informer`\n   * can display the message.\n   *\n   * @param {string | object} message Message to be displayed by the informer\n   * @param {string} [type]\n   * @param {number} [duration]\n   */\n  info (message, type = 'info', duration = 3000) {\n    const isComplexMessage = typeof message === 'object'\n\n    this.setState({\n      info: [\n        ...this.getState().info,\n        {\n          type,\n          message: isComplexMessage ? message.message : message,\n          details: isComplexMessage ? message.details : null,\n        },\n      ],\n    })\n\n    setTimeout(() => this.hideInfo(), duration)\n\n    this.emit('info-visible')\n  }\n\n  /**\n   * Passes messages to a function, provided in `opts.logger`.\n   * If `opts.logger: Uppy.debugLogger` or `opts.debug: true`, logs to the browser console.\n   *\n   * @param {string|object} message to log\n   * @param {string} [type] optional `error` or `warning`\n   */\n  log (message, type) {\n    const { logger } = this.opts\n    switch (type) {\n      case 'error': logger.error(message); break\n      case 'warning': logger.warn(message); break\n      default: logger.debug(message); break\n    }\n  }\n\n  /**\n   * Restore an upload by its ID.\n   */\n  restore (uploadID) {\n    this.log(`Core: attempting to restore upload \"${uploadID}\"`)\n\n    if (!this.getState().currentUploads[uploadID]) {\n      this.#removeUpload(uploadID)\n      return Promise.reject(new Error('Nonexistent upload'))\n    }\n\n    return this.#runUpload(uploadID)\n  }\n\n  /**\n   * Create an upload for a bunch of files.\n   *\n   * @param {Array<string>} fileIDs File IDs to include in this upload.\n   * @returns {string} ID of this upload.\n   */\n  #createUpload (fileIDs, opts = {}) {\n    // uppy.retryAll sets this to true — when retrying we want to ignore `allowNewUpload: false`\n    const { forceAllowNewUpload = false } = opts\n\n    const { allowNewUpload, currentUploads } = this.getState()\n    if (!allowNewUpload && !forceAllowNewUpload) {\n      throw new Error('Cannot create a new upload: already uploading.')\n    }\n\n    const uploadID = nanoid()\n\n    this.emit('upload', {\n      id: uploadID,\n      fileIDs,\n    })\n\n    this.setState({\n      allowNewUpload: this.opts.allowMultipleUploadBatches !== false && this.opts.allowMultipleUploads !== false,\n\n      currentUploads: {\n        ...currentUploads,\n        [uploadID]: {\n          fileIDs,\n          step: 0,\n          result: {},\n        },\n      },\n    })\n\n    return uploadID\n  }\n\n  [Symbol.for('uppy test: createUpload')] (...args) { return this.#createUpload(...args) }\n\n  #getUpload (uploadID) {\n    const { currentUploads } = this.getState()\n\n    return currentUploads[uploadID]\n  }\n\n  /**\n   * Add data to an upload's result object.\n   *\n   * @param {string} uploadID The ID of the upload.\n   * @param {object} data Data properties to add to the result object.\n   */\n  addResultData (uploadID, data) {\n    if (!this.#getUpload(uploadID)) {\n      this.log(`Not setting result for an upload that has been removed: ${uploadID}`)\n      return\n    }\n    const { currentUploads } = this.getState()\n    const currentUpload = { ...currentUploads[uploadID], result: { ...currentUploads[uploadID].result, ...data } }\n    this.setState({\n      currentUploads: { ...currentUploads, [uploadID]: currentUpload },\n    })\n  }\n\n  /**\n   * Remove an upload, eg. if it has been canceled or completed.\n   *\n   * @param {string} uploadID The ID of the upload.\n   */\n  #removeUpload (uploadID) {\n    const currentUploads = { ...this.getState().currentUploads }\n    delete currentUploads[uploadID]\n\n    this.setState({\n      currentUploads,\n    })\n  }\n\n  /**\n   * Run an upload. This picks up where it left off in case the upload is being restored.\n   *\n   * @private\n   */\n  async #runUpload (uploadID) {\n    const getCurrentUpload = () => {\n      const { currentUploads } = this.getState()\n      return currentUploads[uploadID]\n    }\n\n    let currentUpload = getCurrentUpload()\n\n    const steps = [\n      ...this.#preProcessors,\n      ...this.#uploaders,\n      ...this.#postProcessors,\n    ]\n    try {\n      for (let step = currentUpload.step || 0; step < steps.length; step++) {\n        if (!currentUpload) {\n          break\n        }\n        const fn = steps[step]\n\n        this.setState({\n          currentUploads: {\n            ...this.getState().currentUploads,\n            [uploadID]: {\n              ...currentUpload,\n              step,\n            },\n          },\n        })\n\n        const { fileIDs } = currentUpload\n\n        // TODO give this the `updatedUpload` object as its only parameter maybe?\n        // Otherwise when more metadata may be added to the upload this would keep getting more parameters\n        await fn(fileIDs, uploadID)\n\n        // Update currentUpload value in case it was modified asynchronously.\n        currentUpload = getCurrentUpload()\n      }\n    } catch (err) {\n      this.#removeUpload(uploadID)\n      throw err\n    }\n\n    // Set result data.\n    if (currentUpload) {\n      // Mark postprocessing step as complete if necessary; this addresses a case where we might get\n      // stuck in the postprocessing UI while the upload is fully complete.\n      // If the postprocessing steps do not do any work, they may not emit postprocessing events at\n      // all, and never mark the postprocessing as complete. This is fine on its own but we\n      // introduced code in the @uppy/core upload-success handler to prepare postprocessing progress\n      // state if any postprocessors are registered. That is to avoid a \"flash of completed state\"\n      // before the postprocessing plugins can emit events.\n      //\n      // So, just in case an upload with postprocessing plugins *has* completed *without* emitting\n      // postprocessing completion, we do it instead.\n      currentUpload.fileIDs.forEach((fileID) => {\n        const file = this.getFile(fileID)\n        if (file && file.progress.postprocess) {\n          this.emit('postprocess-complete', file)\n        }\n      })\n\n      const files = currentUpload.fileIDs.map((fileID) => this.getFile(fileID))\n      const successful = files.filter((file) => !file.error)\n      const failed = files.filter((file) => file.error)\n      await this.addResultData(uploadID, { successful, failed, uploadID })\n\n      // Update currentUpload value in case it was modified asynchronously.\n      currentUpload = getCurrentUpload()\n    }\n    // Emit completion events.\n    // This is in a separate function so that the `currentUploads` variable\n    // always refers to the latest state. In the handler right above it refers\n    // to an outdated object without the `.result` property.\n    let result\n    if (currentUpload) {\n      result = currentUpload.result\n      this.emit('complete', result)\n\n      this.#removeUpload(uploadID)\n    }\n    if (result == null) {\n      this.log(`Not setting result for an upload that has been removed: ${uploadID}`)\n    }\n    return result\n  }\n\n  /**\n   * Start an upload for all the files that are not currently being uploaded.\n   *\n   * @returns {Promise}\n   */\n  upload () {\n    if (!this.#plugins.uploader?.length) {\n      this.log('No uploader type plugins are used', 'warning')\n    }\n\n    let { files } = this.getState()\n\n    const onBeforeUploadResult = this.opts.onBeforeUpload(files)\n\n    if (onBeforeUploadResult === false) {\n      return Promise.reject(new Error('Not starting the upload because onBeforeUpload returned false'))\n    }\n\n    if (onBeforeUploadResult && typeof onBeforeUploadResult === 'object') {\n      files = onBeforeUploadResult\n      // Updating files in state, because uploader plugins receive file IDs,\n      // and then fetch the actual file object from state\n      this.setState({\n        files,\n      })\n    }\n\n    return Promise.resolve()\n      .then(() => this.#restricter.validateMinNumberOfFiles(files))\n      .catch((err) => {\n        this.#informAndEmit([err])\n        throw err\n      })\n      .then(() => {\n        if (!this.#checkRequiredMetaFields(files)) {\n          throw new RestrictionError(this.i18n('missingRequiredMetaField'))\n        }\n      })\n      .catch((err) => {\n        // Doing this in a separate catch because we already emited and logged\n        // all the errors in `checkRequiredMetaFields` so we only throw a generic\n        // missing fields error here.\n        throw err\n      })\n      .then(() => {\n        const { currentUploads } = this.getState()\n        // get a list of files that are currently assigned to uploads\n        const currentlyUploadingFiles = Object.values(currentUploads).flatMap(curr => curr.fileIDs)\n\n        const waitingFileIDs = []\n        Object.keys(files).forEach((fileID) => {\n          const file = this.getFile(fileID)\n          // if the file hasn't started uploading and hasn't already been assigned to an upload..\n          if ((!file.progress.uploadStarted) && (currentlyUploadingFiles.indexOf(fileID) === -1)) {\n            waitingFileIDs.push(file.id)\n          }\n        })\n\n        const uploadID = this.#createUpload(waitingFileIDs)\n        return this.#runUpload(uploadID)\n      })\n      .catch((err) => {\n        this.emit('error', err)\n        this.log(err, 'error')\n        throw err\n      })\n  }\n}\n\nexport default Uppy\n"],"mappings":"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"}