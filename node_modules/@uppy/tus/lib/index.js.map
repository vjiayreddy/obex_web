{"version":3,"names":["BasePlugin","tus","Provider","RequestClient","Socket","emitSocketProgress","getSocketHost","EventTracker","NetworkError","isNetworkError","RateLimitedQueue","hasProperty","filterNonFailedFiles","filterFilesToEmitUploadStarted","getFingerprint","packageJson","tusDefaultOptions","endpoint","uploadUrl","metadata","uploadSize","onProgress","onChunkComplete","onSuccess","onError","overridePatchMethod","headers","addRequestId","chunkSize","Infinity","retryDelays","parallelUploads","removeFingerprintOnSuccess","uploadLengthDeferred","uploadDataDuringCreation","Tus","constructor","uppy","opts","file","Client","remote","providerOptions","provider","client","Object","assign","res","post","url","body","protocol","size","data","meta","token","fileIDs","length","log","limit","filesToUpload","getFilesByIds","type","id","title","defaultOptions","useFastRemoteRetry","withCredentials","allowedMetaFields","undefined","Error","requests","rateLimitedQueue","values","uploaders","create","uploaderEvents","uploaderSockets","handleResetProgress","bind","wrapPromiseFunction","priority","files","getState","keys","forEach","fileID","tusState","setState","resetUploaderReferences","uploader","abort","remove","close","connectToServerSocket","Promise","resolve","reject","serverToken","host","companionUrl","socket","target","autoOpen","queuedRequest","onFileRemove","send","onPause","isPaused","run","open","onPauseAll","onCancelAll","reason","onResumeAll","error","onRetry","isOpen","onRetryAll","on","progressData","errData","message","cause","setFileState","emit","done","uploadResp","uploadURL","onReceiveUploadUrl","currentFile","getFile","cb","targetFileID","eventHandler","install","capabilities","resumableUploads","addUploader","uninstall","removeUploader","qRequest","upload","uploadOptions","fingerprint","onBeforeRequest","req","xhr","getUnderlyingObject","userProvidedPromise","shouldBeRequeued","p","all","err","originalRequest","bytesUploaded","bytesTotal","name","defaultOnShouldRetry","status","originalResponse","getStatus","next","rateLimit","value","navigator","onLine","pause","window","addEventListener","resume","once","fn","onShouldRetry","args","copyProp","obj","srcProp","destProp","Array","isArray","item","Upload","start","findPreviousUploads","then","previousUploads","previousUpload","creationTime","resumeFromPreviousUpload","catch","filesFiltered","filesToEmit","allSettled","map","i","current","total","isRemote","VERSION","version"],"sources":["index.js"],"sourcesContent":["import BasePlugin from '@uppy/core/lib/BasePlugin.js'\nimport * as tus from 'tus-js-client'\nimport { Provider, RequestClient, Socket } from '@uppy/companion-client'\nimport emitSocketProgress from '@uppy/utils/lib/emitSocketProgress'\nimport getSocketHost from '@uppy/utils/lib/getSocketHost'\nimport EventTracker from '@uppy/utils/lib/EventTracker'\nimport NetworkError from '@uppy/utils/lib/NetworkError'\nimport isNetworkError from '@uppy/utils/lib/isNetworkError'\nimport { RateLimitedQueue } from '@uppy/utils/lib/RateLimitedQueue'\nimport hasProperty from '@uppy/utils/lib/hasProperty'\nimport { filterNonFailedFiles, filterFilesToEmitUploadStarted } from '@uppy/utils/lib/fileFilters'\nimport getFingerprint from './getFingerprint.js'\n\nimport packageJson from '../package.json'\n\n/** @typedef {import('..').TusOptions} TusOptions */\n/** @typedef {import('tus-js-client').UploadOptions} RawTusOptions */\n/** @typedef {import('@uppy/core').Uppy} Uppy */\n/** @typedef {import('@uppy/core').UppyFile} UppyFile */\n/** @typedef {import('@uppy/core').FailedUppyFile<{}>} FailedUppyFile */\n\n/**\n * Extracted from https://github.com/tus/tus-js-client/blob/master/lib/upload.js#L13\n * excepted we removed 'fingerprint' key to avoid adding more dependencies\n *\n * @type {RawTusOptions}\n */\nconst tusDefaultOptions = {\n  endpoint: '',\n\n  uploadUrl: null,\n  metadata: {},\n  uploadSize: null,\n\n  onProgress: null,\n  onChunkComplete: null,\n  onSuccess: null,\n  onError: null,\n\n  overridePatchMethod: false,\n  headers: {},\n  addRequestId: false,\n\n  chunkSize: Infinity,\n  retryDelays: [100, 1000, 3000, 5000],\n  parallelUploads: 1,\n  removeFingerprintOnSuccess: false,\n  uploadLengthDeferred: false,\n  uploadDataDuringCreation: false,\n}\n\n/**\n * Tus resumable file uploader\n */\nexport default class Tus extends BasePlugin {\n  static VERSION = packageJson.version\n\n  #retryDelayIterator\n\n  #queueRequestSocketToken\n\n  /**\n   * @param {Uppy} uppy\n   * @param {TusOptions} opts\n   */\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.type = 'uploader'\n    this.id = this.opts.id || 'Tus'\n    this.title = 'Tus'\n\n    // set default options\n    const defaultOptions = {\n      useFastRemoteRetry: true,\n      limit: 20,\n      retryDelays: tusDefaultOptions.retryDelays,\n      withCredentials: false,\n    }\n\n    // merge default options with the ones set by user\n    /** @type {import(\"..\").TusOptions} */\n    this.opts = { ...defaultOptions, ...opts }\n\n    if (opts?.allowedMetaFields === undefined && 'metaFields' in this.opts) {\n      throw new Error('The `metaFields` option has been renamed to `allowedMetaFields`.')\n    }\n\n    if ('autoRetry' in opts) {\n      throw new Error('The `autoRetry` option was deprecated and has been removed.')\n    }\n\n    /**\n     * Simultaneous upload limiting is shared across all uploads with this plugin.\n     *\n     * @type {RateLimitedQueue}\n     */\n    this.requests = this.opts.rateLimitedQueue ?? new RateLimitedQueue(this.opts.limit)\n    this.#retryDelayIterator = this.opts.retryDelays?.values()\n\n    this.uploaders = Object.create(null)\n    this.uploaderEvents = Object.create(null)\n    this.uploaderSockets = Object.create(null)\n\n    this.handleResetProgress = this.handleResetProgress.bind(this)\n    this.#queueRequestSocketToken = this.requests.wrapPromiseFunction(this.#requestSocketToken, { priority: -1 })\n  }\n\n  handleResetProgress () {\n    const files = { ...this.uppy.getState().files }\n    Object.keys(files).forEach((fileID) => {\n      // Only clone the file object if it has a Tus `uploadUrl` attached.\n      if (files[fileID].tus && files[fileID].tus.uploadUrl) {\n        const tusState = { ...files[fileID].tus }\n        delete tusState.uploadUrl\n        files[fileID] = { ...files[fileID], tus: tusState }\n      }\n    })\n\n    this.uppy.setState({ files })\n  }\n\n  /**\n   * Clean up all references for a file's upload: the tus.Upload instance,\n   * any events related to the file, and the Companion WebSocket connection.\n   *\n   * @param {string} fileID\n   */\n  resetUploaderReferences (fileID, opts = {}) {\n    if (this.uploaders[fileID]) {\n      const uploader = this.uploaders[fileID]\n\n      uploader.abort()\n\n      if (opts.abort) {\n        uploader.abort(true)\n      }\n\n      this.uploaders[fileID] = null\n    }\n    if (this.uploaderEvents[fileID]) {\n      this.uploaderEvents[fileID].remove()\n      this.uploaderEvents[fileID] = null\n    }\n    if (this.uploaderSockets[fileID]) {\n      this.uploaderSockets[fileID].close()\n      this.uploaderSockets[fileID] = null\n    }\n  }\n\n  /**\n   * Create a new Tus upload.\n   *\n   * A lot can happen during an upload, so this is quite hard to follow!\n   * - First, the upload is started. If the file was already paused by the time the upload starts, nothing should happen.\n   *   If the `limit` option is used, the upload must be queued onto the `this.requests` queue.\n   *   When an upload starts, we store the tus.Upload instance, and an EventTracker instance that manages the event listeners\n   *   for pausing, cancellation, removal, etc.\n   * - While the upload is in progress, it may be paused or cancelled.\n   *   Pausing aborts the underlying tus.Upload, and removes the upload from the `this.requests` queue. All other state is\n   *   maintained.\n   *   Cancelling removes the upload from the `this.requests` queue, and completely aborts the upload-- the `tus.Upload`\n   *   instance is aborted and discarded, the EventTracker instance is destroyed (removing all listeners).\n   *   Resuming the upload uses the `this.requests` queue as well, to prevent selectively pausing and resuming uploads from\n   *   bypassing the limit.\n   * - After completing an upload, the tus.Upload and EventTracker instances are cleaned up, and the upload is marked as done\n   *   in the `this.requests` queue.\n   * - When an upload completed with an error, the same happens as on successful completion, but the `upload()` promise is\n   *   rejected.\n   *\n   * When working on this function, keep in mind:\n   *  - When an upload is completed or cancelled for any reason, the tus.Upload and EventTracker instances need to be cleaned\n   *    up using this.resetUploaderReferences().\n   *  - When an upload is cancelled or paused, for any reason, it needs to be removed from the `this.requests` queue using\n   *    `queuedRequest.abort()`.\n   *  - When an upload is completed for any reason, including errors, it needs to be marked as such using\n   *    `queuedRequest.done()`.\n   *  - When an upload is started or resumed, it needs to go through the `this.requests` queue. The `queuedRequest` variable\n   *    must be updated so the other uses of it are valid.\n   *  - Before replacing the `queuedRequest` variable, the previous `queuedRequest` must be aborted, else it will keep taking\n   *    up a spot in the queue.\n   *\n   * @param {UppyFile} file for use with upload\n   * @returns {Promise<void>}\n   */\n  #upload (file) {\n    this.resetUploaderReferences(file.id)\n\n    // Create a new tus upload\n    return new Promise((resolve, reject) => {\n      let queuedRequest\n      let qRequest\n      let upload\n\n      const opts = {\n        ...this.opts,\n        ...(file.tus || {}),\n      }\n\n      if (typeof opts.headers === 'function') {\n        opts.headers = opts.headers(file)\n      }\n\n      /** @type {RawTusOptions} */\n      const uploadOptions = {\n        ...tusDefaultOptions,\n        ...opts,\n      }\n\n      // We override tus fingerprint to uppy’s `file.id`, since the `file.id`\n      // now also includes `relativePath` for files added from folders.\n      // This means you can add 2 identical files, if one is in folder a,\n      // the other in folder b.\n      uploadOptions.fingerprint = getFingerprint(file)\n\n      uploadOptions.onBeforeRequest = (req) => {\n        const xhr = req.getUnderlyingObject()\n        xhr.withCredentials = !!opts.withCredentials\n\n        let userProvidedPromise\n        if (typeof opts.onBeforeRequest === 'function') {\n          userProvidedPromise = opts.onBeforeRequest(req, file)\n        }\n\n        if (hasProperty(queuedRequest, 'shouldBeRequeued')) {\n          if (!queuedRequest.shouldBeRequeued) return Promise.reject()\n          let done\n          const p = new Promise((res) => { // eslint-disable-line promise/param-names\n            done = res\n          })\n          queuedRequest = this.requests.run(() => {\n            if (file.isPaused) {\n              queuedRequest.abort()\n            }\n            done()\n            return () => {}\n          })\n          // If the request has been requeued because it was rate limited by the\n          // remote server, we want to wait for `RateLimitedQueue` to dispatch\n          // the re-try request.\n          // Therefore we create a promise that the queue will resolve when\n          // enough time has elapsed to expect not to be rate-limited again.\n          // This means we can hold the Tus retry here with a `Promise.all`,\n          // together with the returned value of the user provided\n          // `onBeforeRequest` option callback (in case it returns a promise).\n          return Promise.all([p, userProvidedPromise])\n        }\n        return userProvidedPromise\n      }\n\n      uploadOptions.onError = (err) => {\n        this.uppy.log(err)\n\n        const xhr = err.originalRequest ? err.originalRequest.getUnderlyingObject() : null\n        if (isNetworkError(xhr)) {\n          // eslint-disable-next-line no-param-reassign\n          err = new NetworkError(err, xhr)\n        }\n\n        this.resetUploaderReferences(file.id)\n        queuedRequest?.abort()\n\n        this.uppy.emit('upload-error', file, err)\n\n        reject(err)\n      }\n\n      uploadOptions.onProgress = (bytesUploaded, bytesTotal) => {\n        this.onReceiveUploadUrl(file, upload.url)\n        this.uppy.emit('upload-progress', file, {\n          uploader: this,\n          bytesUploaded,\n          bytesTotal,\n        })\n      }\n\n      uploadOptions.onSuccess = () => {\n        const uploadResp = {\n          uploadURL: upload.url,\n        }\n\n        this.resetUploaderReferences(file.id)\n        queuedRequest.done()\n\n        this.uppy.emit('upload-success', file, uploadResp)\n\n        if (upload.url) {\n          this.uppy.log(`Download ${upload.file.name} from ${upload.url}`)\n        }\n\n        resolve(upload)\n      }\n\n      const defaultOnShouldRetry = (err) => {\n        const status = err?.originalResponse?.getStatus()\n\n        if (status === 429) {\n          // HTTP 429 Too Many Requests => to avoid the whole download to fail, pause all requests.\n          if (!this.requests.isPaused) {\n            const next = this.#retryDelayIterator?.next()\n            if (next == null || next.done) {\n              return false\n            }\n            this.requests.rateLimit(next.value)\n          }\n        } else if (status > 400 && status < 500 && status !== 409) {\n          // HTTP 4xx, the server won't send anything, it's doesn't make sense to retry\n          return false\n        } else if (typeof navigator !== 'undefined' && navigator.onLine === false) {\n          // The navigator is offline, let's wait for it to come back online.\n          if (!this.requests.isPaused) {\n            this.requests.pause()\n            window.addEventListener('online', () => {\n              this.requests.resume()\n            }, { once: true })\n          }\n        }\n        queuedRequest.abort()\n        queuedRequest = {\n          shouldBeRequeued: true,\n          abort () {\n            this.shouldBeRequeued = false\n          },\n          done () {\n            throw new Error('Cannot mark a queued request as done: this indicates a bug')\n          },\n          fn () {\n            throw new Error('Cannot run a queued request: this indicates a bug')\n          },\n        }\n        return true\n      }\n\n      if (opts.onShouldRetry != null) {\n        uploadOptions.onShouldRetry = (...args) => opts.onShouldRetry(...args, defaultOnShouldRetry)\n      } else {\n        uploadOptions.onShouldRetry = defaultOnShouldRetry\n      }\n\n      const copyProp = (obj, srcProp, destProp) => {\n        if (hasProperty(obj, srcProp) && !hasProperty(obj, destProp)) {\n          // eslint-disable-next-line no-param-reassign\n          obj[destProp] = obj[srcProp]\n        }\n      }\n\n      /** @type {Record<string, string>} */\n      const meta = {}\n      const allowedMetaFields = Array.isArray(opts.allowedMetaFields)\n        ? opts.allowedMetaFields\n        // Send along all fields by default.\n        : Object.keys(file.meta)\n      allowedMetaFields.forEach((item) => {\n        meta[item] = file.meta[item]\n      })\n\n      // tusd uses metadata fields 'filetype' and 'filename'\n      copyProp(meta, 'type', 'filetype')\n      copyProp(meta, 'name', 'filename')\n\n      uploadOptions.metadata = meta\n\n      upload = new tus.Upload(file.data, uploadOptions)\n      this.uploaders[file.id] = upload\n      this.uploaderEvents[file.id] = new EventTracker(this.uppy)\n\n      // eslint-disable-next-line prefer-const\n      qRequest = () => {\n        if (!file.isPaused) {\n          upload.start()\n        }\n        // Don't do anything here, the caller will take care of cancelling the upload itself\n        // using resetUploaderReferences(). This is because resetUploaderReferences() has to be\n        // called when this request is still in the queue, and has not been started yet, too. At\n        // that point this cancellation function is not going to be called.\n        // Also, we need to remove the request from the queue _without_ destroying everything\n        // related to this upload to handle pauses.\n        return () => {}\n      }\n\n      upload.findPreviousUploads().then((previousUploads) => {\n        const previousUpload = previousUploads[0]\n        if (previousUpload) {\n          this.uppy.log(`[Tus] Resuming upload of ${file.id} started at ${previousUpload.creationTime}`)\n          upload.resumeFromPreviousUpload(previousUpload)\n        }\n      })\n\n      queuedRequest = this.requests.run(qRequest)\n\n      this.onFileRemove(file.id, (targetFileID) => {\n        queuedRequest.abort()\n        this.resetUploaderReferences(file.id, { abort: !!upload.url })\n        resolve(`upload ${targetFileID} was removed`)\n      })\n\n      this.onPause(file.id, (isPaused) => {\n        queuedRequest.abort()\n        if (isPaused) {\n          // Remove this file from the queue so another file can start in its place.\n          upload.abort()\n        } else {\n          // Resuming an upload should be queued, else you could pause and then\n          // resume a queued upload to make it skip the queue.\n          queuedRequest = this.requests.run(qRequest)\n        }\n      })\n\n      this.onPauseAll(file.id, () => {\n        queuedRequest.abort()\n        upload.abort()\n      })\n\n      this.onCancelAll(file.id, ({ reason } = {}) => {\n        if (reason === 'user') {\n          queuedRequest.abort()\n          this.resetUploaderReferences(file.id, { abort: !!upload.url })\n        }\n        resolve(`upload ${file.id} was canceled`)\n      })\n\n      this.onResumeAll(file.id, () => {\n        queuedRequest.abort()\n        if (file.error) {\n          upload.abort()\n        }\n        queuedRequest = this.requests.run(qRequest)\n      })\n    }).catch((err) => {\n      this.uppy.emit('upload-error', file, err)\n      throw err\n    })\n  }\n\n  #requestSocketToken = async (file) => {\n    const Client = file.remote.providerOptions.provider ? Provider : RequestClient\n    const client = new Client(this.uppy, file.remote.providerOptions)\n    const opts = { ...this.opts }\n\n    if (file.tus) {\n      // Install file-specific upload overrides.\n      Object.assign(opts, file.tus)\n    }\n\n    const res = await client.post(file.remote.url, {\n      ...file.remote.body,\n      endpoint: opts.endpoint,\n      uploadUrl: opts.uploadUrl,\n      protocol: 'tus',\n      size: file.data.size,\n      headers: opts.headers,\n      metadata: file.meta,\n    })\n    return res.token\n  }\n\n  // NOTE! Keep this duplicated code in sync with other plugins\n  // TODO we should probably abstract this into a common function\n  /**\n   * @param {UppyFile} file for use with upload\n   * @returns {Promise<void>}\n   */\n  async #uploadRemote (file) {\n    this.resetUploaderReferences(file.id)\n\n    try {\n      if (file.serverToken) {\n        return await this.connectToServerSocket(file)\n      }\n      const serverToken = await this.#queueRequestSocketToken(file)\n\n      if (!this.uppy.getState().files[file.id]) return undefined\n\n      this.uppy.setFileState(file.id, { serverToken })\n      return await this.connectToServerSocket(this.uppy.getFile(file.id))\n    } catch (err) {\n      this.uppy.setFileState(file.id, { serverToken: undefined })\n      this.uppy.emit('upload-error', file, err)\n      throw err\n    }\n  }\n\n  /**\n   * See the comment on the upload() method.\n   *\n   * Additionally, when an upload is removed, completed, or cancelled, we need to close the WebSocket connection. This is\n   * handled by the resetUploaderReferences() function, so the same guidelines apply as in upload().\n   *\n   * @param {UppyFile} file\n   */\n  async connectToServerSocket (file) {\n    return new Promise((resolve, reject) => {\n      const token = file.serverToken\n      const host = getSocketHost(file.remote.companionUrl)\n      const socket = new Socket({ target: `${host}/api/${token}`, autoOpen: false })\n      this.uploaderSockets[file.id] = socket\n      this.uploaderEvents[file.id] = new EventTracker(this.uppy)\n\n      let queuedRequest\n\n      this.onFileRemove(file.id, () => {\n        queuedRequest.abort()\n        socket.send('cancel', {})\n        this.resetUploaderReferences(file.id)\n        resolve(`upload ${file.id} was removed`)\n      })\n\n      this.onPause(file.id, (isPaused) => {\n        if (isPaused) {\n          // Remove this file from the queue so another file can start in its place.\n          queuedRequest.abort()\n          socket.send('pause', {})\n        } else {\n          // Resuming an upload should be queued, else you could pause and then\n          // resume a queued upload to make it skip the queue.\n          queuedRequest.abort()\n          queuedRequest = this.requests.run(() => {\n            socket.open()\n            socket.send('resume', {})\n\n            return () => socket.close()\n          })\n        }\n      })\n\n      this.onPauseAll(file.id, () => {\n        queuedRequest.abort()\n        socket.send('pause', {})\n      })\n\n      this.onCancelAll(file.id, ({ reason } = {}) => {\n        if (reason === 'user') {\n          queuedRequest.abort()\n          socket.send('cancel', {})\n          this.resetUploaderReferences(file.id)\n        }\n        resolve(`upload ${file.id} was canceled`)\n      })\n\n      this.onResumeAll(file.id, () => {\n        queuedRequest.abort()\n        if (file.error) {\n          socket.send('pause', {})\n        }\n        queuedRequest = this.requests.run(() => {\n          socket.open()\n          socket.send('resume', {})\n\n          return () => socket.close()\n        })\n      })\n\n      this.onRetry(file.id, () => {\n        // Only do the retry if the upload is actually in progress;\n        // else we could try to send these messages when the upload is still queued.\n        // We may need a better check for this since the socket may also be closed\n        // for other reasons, like network failures.\n        if (socket.isOpen) {\n          socket.send('pause', {})\n          socket.send('resume', {})\n        }\n      })\n\n      this.onRetryAll(file.id, () => {\n        // See the comment in the onRetry() call\n        if (socket.isOpen) {\n          socket.send('pause', {})\n          socket.send('resume', {})\n        }\n      })\n\n      socket.on('progress', (progressData) => emitSocketProgress(this, progressData, file))\n\n      socket.on('error', (errData) => {\n        const { message } = errData.error\n        const error = Object.assign(new Error(message), { cause: errData.error })\n\n        // If the remote retry optimisation should not be used,\n        // close the socket—this will tell companion to clear state and delete the file.\n        if (!this.opts.useFastRemoteRetry) {\n          this.resetUploaderReferences(file.id)\n          // Remove the serverToken so that a new one will be created for the retry.\n          this.uppy.setFileState(file.id, {\n            serverToken: null,\n          })\n        } else {\n          socket.close()\n        }\n\n        this.uppy.emit('upload-error', file, error)\n        queuedRequest.done()\n        reject(error)\n      })\n\n      socket.on('success', (data) => {\n        const uploadResp = {\n          uploadURL: data.url,\n        }\n\n        this.uppy.emit('upload-success', file, uploadResp)\n        this.resetUploaderReferences(file.id)\n        queuedRequest.done()\n\n        resolve()\n      })\n\n      queuedRequest = this.requests.run(() => {\n        if (file.isPaused) {\n          socket.send('pause', {})\n        } else {\n          socket.open()\n        }\n\n        // Just close the socket here, the caller will take care of cancelling the upload itself\n        // using resetUploaderReferences(). This is because resetUploaderReferences() has to be\n        // called when this request is still in the queue, and has not been started yet, too. At\n        // that point this cancellation function is not going to be called.\n        // Also, we need to remove the request from the queue _without_ destroying everything\n        // related to this upload to handle pauses.\n        return () => socket.close()\n      })\n    })\n  }\n\n  /**\n   * Store the uploadUrl on the file options, so that when Golden Retriever\n   * restores state, we will continue uploading to the correct URL.\n   *\n   * @param {UppyFile} file\n   * @param {string} uploadURL\n   */\n  onReceiveUploadUrl (file, uploadURL) {\n    const currentFile = this.uppy.getFile(file.id)\n    if (!currentFile) return\n    // Only do the update if we didn't have an upload URL yet.\n    if (!currentFile.tus || currentFile.tus.uploadUrl !== uploadURL) {\n      this.uppy.log('[Tus] Storing upload url')\n      this.uppy.setFileState(currentFile.id, {\n        tus: { ...currentFile.tus, uploadUrl: uploadURL },\n      })\n    }\n  }\n\n  /**\n   * @param {string} fileID\n   * @param {function(string): void} cb\n   */\n  onFileRemove (fileID, cb) {\n    this.uploaderEvents[fileID].on('file-removed', (file) => {\n      if (fileID === file.id) cb(file.id)\n    })\n  }\n\n  /**\n   * @param {string} fileID\n   * @param {function(boolean): void} cb\n   */\n  onPause (fileID, cb) {\n    this.uploaderEvents[fileID].on('upload-pause', (targetFileID, isPaused) => {\n      if (fileID === targetFileID) {\n        // const isPaused = this.uppy.pauseResume(fileID)\n        cb(isPaused)\n      }\n    })\n  }\n\n  /**\n   * @param {string} fileID\n   * @param {function(): void} cb\n   */\n  onRetry (fileID, cb) {\n    this.uploaderEvents[fileID].on('upload-retry', (targetFileID) => {\n      if (fileID === targetFileID) {\n        cb()\n      }\n    })\n  }\n\n  /**\n   * @param {string} fileID\n   * @param {function(): void} cb\n   */\n  onRetryAll (fileID, cb) {\n    this.uploaderEvents[fileID].on('retry-all', () => {\n      if (!this.uppy.getFile(fileID)) return\n      cb()\n    })\n  }\n\n  /**\n   * @param {string} fileID\n   * @param {function(): void} cb\n   */\n  onPauseAll (fileID, cb) {\n    this.uploaderEvents[fileID].on('pause-all', () => {\n      if (!this.uppy.getFile(fileID)) return\n      cb()\n    })\n  }\n\n  /**\n   * @param {string} fileID\n   * @param {function(): void} eventHandler\n   */\n  onCancelAll (fileID, eventHandler) {\n    this.uploaderEvents[fileID].on('cancel-all', (...args) => {\n      if (!this.uppy.getFile(fileID)) return\n      eventHandler(...args)\n    })\n  }\n\n  /**\n   * @param {string} fileID\n   * @param {function(): void} cb\n   */\n  onResumeAll (fileID, cb) {\n    this.uploaderEvents[fileID].on('resume-all', () => {\n      if (!this.uppy.getFile(fileID)) return\n      cb()\n    })\n  }\n\n  /**\n   * @param {(UppyFile | FailedUppyFile)[]} files\n   */\n  async #uploadFiles (files) {\n    const filesFiltered = filterNonFailedFiles(files)\n    const filesToEmit = filterFilesToEmitUploadStarted(filesFiltered)\n    this.uppy.emit('upload-start', filesToEmit)\n\n    await Promise.allSettled(filesFiltered.map((file, i) => {\n      const current = i + 1\n      const total = files.length\n\n      if (file.isRemote) {\n        return this.#uploadRemote(file, current, total)\n      }\n      return this.#upload(file, current, total)\n    }))\n  }\n\n  /**\n   * @param {string[]} fileIDs\n   */\n  #handleUpload = async (fileIDs) => {\n    if (fileIDs.length === 0) {\n      this.uppy.log('[Tus] No files to upload')\n      return\n    }\n\n    if (this.opts.limit === 0) {\n      this.uppy.log(\n        '[Tus] When uploading multiple files at once, consider setting the `limit` option (to `10` for example), to limit the number of concurrent uploads, which helps prevent memory and network issues: https://uppy.io/docs/tus/#limit-0',\n        'warning',\n      )\n    }\n\n    this.uppy.log('[Tus] Uploading...')\n    const filesToUpload = this.uppy.getFilesByIds(fileIDs)\n\n    await this.#uploadFiles(filesToUpload)\n  }\n\n  install () {\n    this.uppy.setState({\n      capabilities: { ...this.uppy.getState().capabilities, resumableUploads: true },\n    })\n    this.uppy.addUploader(this.#handleUpload)\n\n    this.uppy.on('reset-progress', this.handleResetProgress)\n  }\n\n  uninstall () {\n    this.uppy.setState({\n      capabilities: { ...this.uppy.getState().capabilities, resumableUploads: false },\n    })\n    this.uppy.removeUploader(this.#handleUpload)\n  }\n}\n"],"mappings":"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"}