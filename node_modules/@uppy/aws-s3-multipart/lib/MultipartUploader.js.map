{"version":3,"names":["AbortController","MB","defaultOptions","getChunkSize","file","Math","ceil","size","onProgress","onPartComplete","onSuccess","onError","err","ensureInt","value","parseInt","TypeError","pausingUploadReason","Symbol","MultipartUploader","constructor","data","options","cause","index","ev","lengthComputable","sent","loaded","uploaded","totalUploaded","reduce","n","c","etag","done","part","PartNumber","ETag","start","signal","aborted","abort","pause","opts","undefined","really","chunkState","desiredChunkSize","fileSize","minChunkSize","max","chunkSize","getData","onComplete","arraySize","Array","i","j","end","min","i2","slice","map","companionComm","uploadFile","then","resumeUploadFile","abortFileUpload","catch","log"],"sources":["MultipartUploader.js"],"sourcesContent":["import { AbortController } from '@uppy/utils/lib/AbortController'\n\nconst MB = 1024 * 1024\n\nconst defaultOptions = {\n  getChunkSize (file) {\n    return Math.ceil(file.size / 10000)\n  },\n  onProgress () {},\n  onPartComplete () {},\n  onSuccess () {},\n  onError (err) {\n    throw err\n  },\n}\n\nfunction ensureInt (value) {\n  if (typeof value === 'string') {\n    return parseInt(value, 10)\n  }\n  if (typeof value === 'number') {\n    return value\n  }\n  throw new TypeError('Expected a number')\n}\n\nconst pausingUploadReason = Symbol('pausing upload, not an actual error')\n\nclass MultipartUploader {\n  #abortController = new AbortController()\n\n  #chunks\n\n  #chunkState\n\n  #data\n\n  #file\n\n  #uploadPromise\n\n  #onError\n\n  #onSuccess\n\n  #onReject = (err) => (err?.cause === pausingUploadReason ? null : this.#onError(err))\n\n  constructor (data, options) {\n    this.options = {\n      ...defaultOptions,\n      ...options,\n    }\n    // Use default `getChunkSize` if it was null or something\n    this.options.getChunkSize ??= defaultOptions.getChunkSize\n\n    this.#data = data\n    this.#file = options.file\n    this.#onSuccess = this.options.onSuccess\n    this.#onError = this.options.onError\n\n    this.#initChunks()\n  }\n\n  #initChunks () {\n    const desiredChunkSize = this.options.getChunkSize(this.#data)\n    // at least 5MB per request, at most 10k requests\n    const fileSize = this.#data.size\n    const minChunkSize = Math.max(5 * MB, Math.ceil(fileSize / 10000))\n    const chunkSize = Math.max(desiredChunkSize, minChunkSize)\n\n    // Upload zero-sized files in one zero-sized chunk\n    if (this.#data.size === 0) {\n      this.#chunks = [{\n        getData: () => this.#data,\n        onProgress: this.#onPartProgress(0),\n        onComplete: this.#onPartComplete(0),\n      }]\n    } else {\n      const arraySize = Math.ceil(fileSize / chunkSize)\n      this.#chunks = Array(arraySize)\n\n      for (let i = 0, j = 0; i < fileSize; i += chunkSize, j++) {\n        const end = Math.min(fileSize, i + chunkSize)\n\n        // Defer data fetching/slicing until we actually need the data, because it's slow if we have a lot of files\n        const getData = () => {\n          const i2 = i\n          return this.#data.slice(i2, end)\n        }\n\n        this.#chunks[j] = {\n          getData,\n          onProgress: this.#onPartProgress(j),\n          onComplete: this.#onPartComplete(j),\n        }\n      }\n    }\n\n    this.#chunkState = this.#chunks.map(() => ({ uploaded: 0 }))\n  }\n\n  #createUpload () {\n    this.#uploadPromise = this\n      .options.companionComm.uploadFile(this.#file, this.#chunks, this.#abortController.signal)\n      .then(this.#onSuccess, this.#onReject)\n  }\n\n  #resumeUpload () {\n    this.#uploadPromise = this\n      .options.companionComm.resumeUploadFile(this.#file, this.#chunks, this.#abortController.signal)\n      .then(this.#onSuccess, this.#onReject)\n  }\n\n  #onPartProgress = (index) => (ev) => {\n    if (!ev.lengthComputable) return\n\n    const sent = ev.loaded\n    this.#chunkState[index].uploaded = ensureInt(sent)\n\n    const totalUploaded = this.#chunkState.reduce((n, c) => n + c.uploaded, 0)\n    this.options.onProgress(totalUploaded, this.#data.size)\n  }\n\n  #onPartComplete = (index) => (etag) => {\n    // This avoids the net::ERR_OUT_OF_MEMORY in Chromium Browsers.\n    this.#chunks[index] = null\n    this.#chunkState[index].etag = etag\n    this.#chunkState[index].done = true\n\n    const part = {\n      PartNumber: index + 1,\n      ETag: etag,\n    }\n    this.options.onPartComplete(part)\n  }\n\n  #abortUpload () {\n    this.#abortController.abort()\n    this.options.companionComm.abortFileUpload(this.#file).catch((err) => this.options.log(err))\n  }\n\n  start () {\n    if (this.#uploadPromise) {\n      if (!this.#abortController.signal.aborted) this.#abortController.abort(pausingUploadReason)\n      this.#abortController = new AbortController()\n      this.#resumeUpload()\n    } else {\n      this.#createUpload()\n    }\n  }\n\n  pause () {\n    this.#abortController.abort(pausingUploadReason)\n    // Swap it out for a new controller, because this instance may be resumed later.\n    this.#abortController = new AbortController()\n  }\n\n  abort (opts = undefined) {\n    if (opts?.really) this.#abortUpload()\n    else this.pause()\n  }\n\n  // TODO: remove this in the next major\n  get chunkState () {\n    return this.#chunkState\n  }\n}\n\nexport default MultipartUploader\n"],"mappings":"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"}